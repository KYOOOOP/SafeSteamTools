name: Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: safesteam_test
          POSTGRES_USER: safesteam
          POSTGRES_PASSWORD: safesteam
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: Setup test environment
        run: |
          cp .env.example .env
          echo "STEAM_API_KEY=TEST_KEY_NOT_REAL" >> .env
          echo "DATABASE_URL=postgresql://safesteam:safesteam@localhost:5432/safesteam_test" >> .env
          echo "REDIS_URL=redis://localhost:6379" >> .env

      - name: Run backend tests
        run: |
          cd backend
          npm run test:coverage
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://safesteam:safesteam@localhost:5432/safesteam_test
          REDIS_URL: redis://localhost:6379
          STEAM_API_KEY: TEST_KEY_NOT_REAL

      - name: Run frontend tests
        run: |
          cd frontend
          npm run test:coverage
        env:
          NODE_ENV: test

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./backend/coverage/lcov.info,./frontend/coverage/lcov.info
          fail_ci_if_error: true
          verbose: true

      - name: Check coverage thresholds
        run: |
          echo "Checking coverage thresholds..."
          cd backend && npm run test:coverage -- --passWithNoTests
          cd ../frontend && npm run test:coverage -- --passWithNoTests

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: Build backend
        run: |
          cd backend
          npm run build

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Build Docker images
        run: docker-compose build

      - name: Test Docker containers
        run: |
          docker-compose up -d
          sleep 30
          # Test backend health endpoint
          curl -f http://localhost:3001/health || exit 1
          docker-compose down

      - name: Store build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            backend/dist/
            frontend/build/
            frontend/.next/
          retention-days: 7

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check TypeScript
        run: npm run typecheck

      - name: Check formatting (if Prettier is configured)
        run: |
          if [ -f ".prettierrc" ] || [ -f "prettier.config.js" ]; then
            npm run format:check || echo "No format:check script found"
          else
            echo "No Prettier configuration found - skipping format check"
          fi
        continue-on-error: true